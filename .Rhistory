}
# Getter for the matrix
get <- function() x
# Setter for the inverse
setinv <- function(inverse) inv <<- inverse
# Getter for the inverse
getinv <- function() inv
# Return the matrix with our newly defined functions
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
x <- matrix(rnorm(16), nrow = 4)
cx <- makeCacheMatrix(x)
cx$get()
cacheSolve(cx)
makeCacheMatrix <- function(x = matrix()) {
# inv will store the cached inverse matrix
inv <- NULL
# Setter for the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# Getter for the matrix
get <- function() x
# Setter for the inverse
setinv <- function(inverse) inv <<- inverse
# Getter for the inverse
getinv <- function() inv
# Return the matrix with our newly defined functions
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the inverse is already calculated, return it
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# The inverse is not yet calculated, so we calculate it
data <- x$get()
inv <- solve(data, ...)
# Cache the inverse
x$setinv(inv)
# Return it
inv
}
# x <- matrix(rnorm(16), nrow = 4)
# cx <- makeCacheMatrix(x)
# cx$get()
# cacheSolve(cx)
x <- matrix(rnorm(16), nrow = 4)
cx <- makeCacheMatrix(x)
cx$get()
cacheSolve(cx)
makeCacheMatrix <- function(x = matrix()) {
# m is cached inverse matrix
m <- NULL
# 1. set the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# 2. get the value of the matrix
get <- function() x
# 3. set the value of the inverse matrix
setinv <- function(inverse) m <<- inverse
# 4. get the value of the inverse matrix
getinv <- function() m
# 5. return the matrix functions
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
#  it first checks to see if the inverse has already been calculated
if (!is.null(m)) {
message("getting cached data")
return(m)
}
# since not calculate
data <- x$get()
m <- solve(data, ...)
# sets the value of the mean in the cache via the setinv function.
x$setinv(m)
m
}
x <- matrix(rnorm(16), nrow = 4)
cx <- makeCacheMatrix(x)
cx$get()
cacheSolve(cx)
makeCacheMatrix <- function(x = matrix()) {
# see example Cachisn the Mean of a Vector
m <- NULL   # m to be cached inverse matrix
# 1. set the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# 2. get the value of the matrix
get <- function() x
# 3. set the value of the inverse matrix
setinv <- function(inverse) m <<- inverse
# 4. get the value of the inverse matrix
getinv <- function() m
# 5. return the matrix functions
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
#  it first checks to see if the inverse has already been calculated
if (!is.null(m)) {
message("getting cached data")
return(m)
}
# since not calculate
data <- x$get()
m <- solve(data, ...)
# sets the value of the mean in the cache via the setinv function.
x$setinv(m)
m
}
## Put comments here that give an overall description of what your
## functions do
##  This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
# see example Cachisn the Mean of a Vector
m <- NULL   # m to be cached inverse matrix
# 1. set the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# 2. get the value of the matrix
get <- function() x
# 3. set the value of the inverse matrix
setinv <- function(inverse) m <<- inverse
# 4. get the value of the inverse matrix
getinv <- function() m
# 5. return the matrix functions
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then the cachesolve should retrieve the inverse from
## the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## see example cachemean
m <- x$getinv()
#  has the inverse already been calculated?
if (!is.null(m)) {
message("getting cached data")
return(m)
}
# since not calculate
data <- x$get()
m <- solve(data, ...)
# sets the value of the mean in the cache via the setinv function.
x$setinv(m)
m
}
x <- matrix(rnorm(16), nrow = 4)
cx <- makeCacheMatrix(x)
cx$get()
cacheSolve(cx)
x <- atrix(rnorm(200),20,10)
x <- matrix(rnorm(200),20,10)
appy(x,2,mean)
apply(x,2,mean)
apply(x,1,mean)
apply(x,1,sum)
x
apply(x,1,quantile,probs <- c(0.25,0.75))
a <- array(rnorm(2*2*10),c(2,2,10))
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
x <- c(rnorm(10), runif(10),rnorm(10,1))
x
f <- gl(3,10)
f
tapply(x,f,sum)
tapply(x,f,mean)
x <- c(rnorm(10), runif(10),rnorm(10,1))
tapply(x,f,mean)
x <- c(rnorm(10), runif(10),rnorm(10,1))
tapply(x,f,mean)
tapply(x,f,mean,simplify=FALSE)
tapply(x,f,range,simplify=FALSE)
tapply(x,f,range)
split(x,f)
lapply(split(x,f),mean)
tapply(x,f,mean)
library(datasets)
head(airquality)
s <- split(airquality,airquality$Month)
lapply(s,function(x) colMeans([,c("Ozone","Solar.R","Wind")])
lapply(s,function(x) colMeans([,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=TRUE))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=TRUE))
x = rnorm(10)
f1=gl(2,5)
f2=gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop=TRUE))
x = rnorm(100)
f1=gl(2,5)
f2=gl(5,2)
str(split(x,list(f1,f2)))
a <- gl(2, 4, 8)
b <- gl(2, 2, 8, labels = c("ctrl", "treat"))
s <- gl(2, 1, 8, labels = c("M", "F"))
interaction(a, b)
interaction(a, b, s, sep = ":")
interaction(a, b, s, sep = ":")
a
b
s
x
str(split(x,list(f1,f2)))
f1
f2
interaction(f1,f2)
y =str(split(x,list(f1,f2)))
y
y <- str(split(x,list(f1,f2)))
y
y <- as.dataframe(str(split(x,list(f1,f2))))
y <- as.data.frame(str(split(x,list(f1,f2))))
y
drop y
drop(y)
clear
log(-1)
printmessage <- function(x) {        if(x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")        invisible(x)}
printmessage <- function(x) {        if(x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")        invisible(x)}
printmessage <- function(x) {        if(x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")        invisible(x)}
printmessage <- function(x) {        if(x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")        invisible(x)}
printmessage <- function(x){        if(x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")        invisible(x)}
printmessage <- function(x){        if(x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")        invisible(x)}
printmessage <- function(x) {
if(x>0)
print("x is greater than 0")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage <- function(x){
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage <- function(x){        if(x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")        invisible(x)}
printmessage <- function(x){        if(x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")        invisible(x)}
printmessage <- function(x){
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage(NA)
printmessage(4)
printmessage2 <- function(x) {        if(is.na(x))                print("x is a missing value!")        else if(x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")        invisible(x)}
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(NA)
printmessage2(NA)
printmessage <- function(x) {        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
printmessage <- function(x) {        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage <- function(x) {        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
printmessage <- function(x) {        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage2 <- function(x) {        if (is.na(x))                print("x is a missing value!") else if (x > 0)                        print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}x <- log(-1)
printmessage2 <- function(x) {        traceback        if (is.na(x))                print("x is a missing value!") else if (x > 0)                        print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}x <- log(-1)
printmessage2 <- function(x) {        if (is.na(x))                print("x is a missing value!") else if (x > 0)                        print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}x <- log(-1)
printmessage2 <- function(x) {
if (is.na(x))
print("x is a missing value!") else if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
invisible(x)
}
x <- log(-1)
x <- log(0)
x
mean(x)
x <- 1:10
mean(x)
drop x
mean(x)
traceback()
lm(y~x)
traceback()
printmessage <- function(x) {        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
traceback()
printmessage <- function(x) {        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
printmessage = function(x) {        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
printmessage <- function(x) {        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
printmessage <-function(x) {        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
printmessage<-function(x){        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")        invisible(x)}printmessage(1)
printmessage<-function(x){        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")#        invisible(x)}printmessage(1)
printmessage <- function(x){        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")#        invisible(x)}printmessage(1)
printmessage <- function(x){        if (x > 0)                print("x is greater than zero") else print("x is less than or equal to zero")#        invisible(x)}
printmessage <- function(x){        if (x > 0)                print("x is greater than zero")         else                 print("x is less than or equal to zero")#        invisible(x)}
printmessage <- function(x){        if (x > 0)                print("x is greater than zero")         else                 print("x is less than or equal to zero")}
printmessage <- function(x){        if (x > 0)                print("x is greater than zero")         else                 print("x is less than or equal to zero")}
printmessage <- function(x){        if (x > 0)                print("x is greater than zero")         else print("x is less than or equal to zero")}
printmessage <- function(x){        if (x > 0)                print("x is greater than zero")         else                print("x is less than or equal to zero")}
printmessage <- function(x) {        if (x > 0)                print("x is greater than zero")        else                print("x is less than or equal to zero")}
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
x <- rnorm(1000)
breaks <- c(-3,-2,-1,0,1,2,3)
f <- cut(x,breaks)
breaks <- c(-3:3)
f <- cut(x,breaks)
summary(f)
str(f)
f <- cut(x,breaks,labels=c("Bottom","Low","Neg","Pos","High","Top"))
summary(f)
f
summary(f)
str(f)
library(datasets)
library(datasets)
data(iris)
?iris
str(iris)
mean(iris$Sepal.Length)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean)) # appears to do it
x <- with(mtcars, tapply(mpg, cyl, mean))
x
x[,3]
x$8
x[3]
x[3]-x[1]
abs(x[3]-x[1])
debug(ls)
ls
debug(ls)
ls
debug(ls)
ls()
?iris
library(datasets)
undebug
library(datasets)
data(iris)
?iris
head(iris)
summary(Species)
summary(iris$Species)
tapply(iris,Species,mean,simplify)
tapply(iris,iris$Species,mean,simplify)
str(iris$Species)
tapply(iris,iris.Species,mean,simplify)
iris$Species
tapply(iris,iris$Species,mean,simplify)
f <- iris$Species == "virginica"
f
tapply(iris,f,mean,simplify)
str(iris$Species)
f <- iris$Species == "virginica"
f
str(f)
summary(f)
tapply(iris,as.factor(f),mean,simplify)
tapply(iris,f,mean,simplify)
iris
tapply(iris$Sepal.Length,f,mean,simplify)
tapply(iris$Sepal.Length,f,mean)
f <- iris$Species == "virginica"
tapply(iris$Sepal.Length,f,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
library(datasets)
data(mtcars)
?mtcars
x <- with(mtcars, tapply(mpg, cyl, mean))
x
x <- with(mtcars, tapply(hp, cyl, mean))
x
abs(x[3]-x[1])
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[, 1:4], 2, mean) # yes
apply(iris[, 1:4], 2, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
x <- with(mtcars, tapply(hp, cyl, mean))
x
abs(x[3]-x[1])
x <- rnorm(10, 20, 2)
x
summary(x)
sd(x)
hilbert <- function(n){
i <- 1:n
1 / outer(i-1,i,"+")
}
x <- hilbert(1000)
system.time(svd(x))
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
set.seed(1)
rpois(5, 2)
setwd("~/github_repo/RepData_PeerAssessment1")
activity <- read.csv("~/github_repo/RepData_PeerAssessment1/activity.csv")
View(activity)
activity <- read.csv("activity.csv")
View(activity)
weekpart <- weekdays(activity$date)
weekpart <- weekdays(activity$date, abbreviate)
weekpart <- weekdays(as.Date.default(activity$date), abbreviate)
weekpart <- weekdays(as.Date(activity$date), abbreviate)
weekpart <- weekdays(as.Date(activity$date))
summary(weekpart)
top(weekpart)
first(weekpart)
summary(weekpart)
View(weekpart)
